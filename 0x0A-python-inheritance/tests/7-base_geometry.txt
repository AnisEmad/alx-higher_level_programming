testing the basegeometry class
=======================================================

importing the class 

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

using it:

>>> bg = BaseGeometry()

>>> bg.integer_validator("lol", True)
Traceback (most recent call last):
...
TypeError: lol must be an integer
>>> bg.integer_validator("lol", False)
Traceback (most recent call last):
...
TypeError: lol must be an integer
>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("my_int", 12.333)
Traceback (most recent call last):
...
TypeError: my_int must be an integer
>>> bg.integer_validator("width", 89)

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0
>>> bg.integer_validator("lol", [1, 2])
Traceback (most recent call last):
...
TypeError: lol must be an integer
>>> bg.integer_validator("lol", (1, 2))
Traceback (most recent call last):
...
TypeError: lol must be an integer
>>> bg.integer_validator("lol", {1, 2, 3})
Traceback (most recent call last):
...
TypeError: lol must be an integer
>>> bg.integer_validator("lol", None)
Traceback (most recent call last):
...
TypeError: lol must be an integer
>>> try:
...     print(bg.area())
... except Exception as e:
...    print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented
>>> allo = BaseGeometry()
... allo.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
>>> bg.integer_validator("0", 0)
